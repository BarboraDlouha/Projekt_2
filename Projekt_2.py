# Separator 
print(60 * "-")

# Header  
print("""
projekt_2.py: druhý projekt do Engeto Online Python Akademie

author: Barbora Dlouha
email: Barbora-Dlouha@seznam.cz
""")

# Separator
print(60 * "-")

# Loading libraries
import random

# Defining functions

# 1. Function for generating a unique four-digit number that does not start with zero
def generate_unique_number():
    """
    Generate a 4-digit number with unique digits that does not start with zero.

    Return:
    -list: digits
    -int:  number
    """
    while True:
        digits = random.sample(range(0, 10), 4)
        if digits[0] != 0:
            return digits, int("".join(map(str, digits)))
        
# 2. Function for validating correct input
def validate_guess_number(guess):
    """ 
    validates user input (checks the number and correctness of characters, 
    duplicates and the starting digit, which must not be zero)

    Args:
    -guessed_number (str): The user's guessed number.

    """
    # List to store all errors
    errors = [] 
    # Check length
    if len(guessed_number) != 4:
        errors.append("The number must have exactly 4 digits.")
    # Check if it contains only digits
    if not guessed_number.isdigit():
        errors.append("The number can only contain digits (0-9).")
    # Check if it starts with zero
    if len(guessed_number) > 0 and guessed_number[0] == '0':
        errors.append("The number cannot start with zero.")
    # Check for duplicate digits
    if len(set(guessed_number)) != len(guessed_number):
        errors.append("The number cannot contain duplicate digits.")
    # If there are errors, join and return them
    if errors:
        return "\n".join(errors)
    # Everything is valid
    return "OK"


# 3. Function to calculate bulls and cows
def calculate_bulls_and_cows(secret_number, guessed_number):
    """
    Counts the number of 'bulls' and 'cows'.

    Bulls: Correct digit in the correct position.
    Cows: Correct digit in the wrong position.

    Args:
    -secret_number (str): The secret number generated by the program.
    -guessed_number (str): The user's guessed number.

    Return: 
    - bulls (tuple)
    - cows (tuple)
    """
    bulls = 0
    cows = 0
    
    for i in range(len(secret_number)):
        if guessed_number[i] == secret_number[i]:
            bulls += 1  
        elif guessed_number[i] in secret_number:
            cows += 1  

    return bulls, cows

# Generating a four-digit number with unique digits that does not start with zero
generated_digits, generated_number = generate_unique_number()
print(f"Vygenerované číslo: {generated_digits} {generated_number}")
            
# Listing the introductory text
print(f"""
Hi there!
{'-' * 45}
I've generated a random 4 digit number for you.
Let's play a bulls and cows game.
{'-' * 45}
""")

# Inputting the guessed number
guessed_number = input("Enter a four-digit number: ")

# User input verification
while True:
    validation_result = validate_guess_number(guessed_number)
    if validation_result == "OK":
        break
    else:
        print(f"Yout input did not meet the following conditions:\n{validation_result}")
        break

print(list(guessed_number))
print(type(generated_digits))
print(type(generated_number))